[{"categories":["posts"],"content":"GCP Cloud Store gsutil command line tool quickstart examples.","date":"2019-05-01","objectID":"/gcp-clould-store-gsutil-quickstart-examples/","tags":["golang","go"],"title":"GCP: Cloud Store gsutil QuickStart Examples","uri":"/gcp-clould-store-gsutil-quickstart-examples/"},{"categories":["posts"],"content":"GCP Cloud Store gsutil command line tool quickstart examples. ","date":"2019-05-01","objectID":"/gcp-clould-store-gsutil-quickstart-examples/:0:0","tags":["golang","go"],"title":"GCP: Cloud Store gsutil QuickStart Examples","uri":"/gcp-clould-store-gsutil-quickstart-examples/"},{"categories":["posts"],"content":"Synopsis The gsutil tool helps to access Clould Storage and perform operations on bucket. Bucket – A top-level folder. Prefix – An folder in a bucket. Object – Any item that’s stored in an Cloud Storage bucket. ","date":"2019-05-01","objectID":"/gcp-clould-store-gsutil-quickstart-examples/:1:0","tags":["golang","go"],"title":"GCP: Cloud Store gsutil QuickStart Examples","uri":"/gcp-clould-store-gsutil-quickstart-examples/"},{"categories":["posts"],"content":"1 Basic operations The following basic operations can be performed on buckets in Cloud Storage. ","date":"2019-05-01","objectID":"/gcp-clould-store-gsutil-quickstart-examples/:2:0","tags":["golang","go"],"title":"GCP: Cloud Store gsutil QuickStart Examples","uri":"/gcp-clould-store-gsutil-quickstart-examples/"},{"categories":["posts"],"content":"1.1 Creating Bucket gsutil provides a gsutil mb command to make buckets. gsutil mb gs://\u003cbucket-name\u003e command to create bucket. ","date":"2019-05-01","objectID":"/gcp-clould-store-gsutil-quickstart-examples/:2:1","tags":["golang","go"],"title":"GCP: Cloud Store gsutil QuickStart Examples","uri":"/gcp-clould-store-gsutil-quickstart-examples/"},{"categories":["posts"],"content":"1.2 Listing Buckets, Subdirectories and Objects gsutil provides a gsutil ls command to list buckets, sub-directories and objects. gsutil ls to list all buckets. gsutil ls gs://\u003cbucket-name\u003e to list objects at the top level of each bucket. gsutil ls gsutil ls gs://\u003cbucket-name\u003e/*.csv to list objects at the top level of each bucket. ","date":"2019-05-01","objectID":"/gcp-clould-store-gsutil-quickstart-examples/:2:2","tags":["golang","go"],"title":"GCP: Cloud Store gsutil QuickStart Examples","uri":"/gcp-clould-store-gsutil-quickstart-examples/"},{"categories":["posts"],"content":"1.3 Delete Buckets and Objects gsutil provides a gsutil rm gs://\u003cbucket-name\u003e/\u003cfilepath\u003e command to delete buckets or objects. gsutil rm gs://bucket/subdir/* remove all objects in gs://bucket/subdir gsutil rm gsutil rm gs://bucket/subdir/** remove all objects in gs://bucket/subdir or subdirectories gsutil rm -r gs://bucket to delete all objects in the bucket and the bucket itself. gsutil rm gs://bucket/** to delete all objects in the bucket but not the bucket itself. ","date":"2019-05-01","objectID":"/gcp-clould-store-gsutil-quickstart-examples/:2:3","tags":["golang","go"],"title":"GCP: Cloud Store gsutil QuickStart Examples","uri":"/gcp-clould-store-gsutil-quickstart-examples/"},{"categories":["posts"],"content":"1.4 Move Buckets and Objects gsutil provides a gsutil mv command to move date between your file system and the cloud. gsutil mv \u003csrc-filepath\u003e gs://\u003cbucket-name\u003e/\u003cdirectory\u003e/\u003cdest-filepath\u003e command used to move from local to bucket in cloud. gsutil mv gs://\u003cbucket-name\u003e/\u003cdirectory\u003e/\u003csrc-filepath\u003e command used to move from bucket in cloud to local. ","date":"2019-05-01","objectID":"/gcp-clould-store-gsutil-quickstart-examples/:2:4","tags":["golang","go"],"title":"GCP: Cloud Store gsutil QuickStart Examples","uri":"/gcp-clould-store-gsutil-quickstart-examples/"},{"categories":["posts"],"content":"1.5 Copy Buckets and Objects gsutil provides a gsutil cp command to copy date between your file system and the cloud. gsutil cp \u003csrc-filepath\u003e gs://\u003cbucket-name\u003e/\u003cdirectory\u003e/\u003cdest-filepath\u003e command used to copy from local to bucket in cloud. gsutil cp gs://\u003cbucket-name\u003e/\u003cdirectory\u003e/\u003csrc-filepath\u003e command used to copy from bucket in cloud to local. ","date":"2019-05-01","objectID":"/gcp-clould-store-gsutil-quickstart-examples/:2:5","tags":["golang","go"],"title":"GCP: Cloud Store gsutil QuickStart Examples","uri":"/gcp-clould-store-gsutil-quickstart-examples/"},{"categories":["posts"],"content":"Go has built-in support to return more than one values.","date":"2019-04-06","objectID":"/golang-how-to-return-multiple-value-and-error-handling/","tags":["golang","go"],"title":"Golang How to Return Multiple Value and Error Handling","uri":"/golang-how-to-return-multiple-value-and-error-handling/"},{"categories":["posts"],"content":"Go has built-in support to return more than one values and its main use case is to identify any error. ","date":"2019-04-06","objectID":"/golang-how-to-return-multiple-value-and-error-handling/:0:0","tags":["golang","go"],"title":"Golang How to Return Multiple Value and Error Handling","uri":"/golang-how-to-return-multiple-value-and-error-handling/"},{"categories":["posts"],"content":"Synopsis We have used In most programming languages, functions can return single value, but in Go, they can return any number of values. The main use case of returning more than one values is to return the functions result and then the value to identify any error. ","date":"2019-04-06","objectID":"/golang-how-to-return-multiple-value-and-error-handling/:1:0","tags":["golang","go"],"title":"Golang How to Return Multiple Value and Error Handling","uri":"/golang-how-to-return-multiple-value-and-error-handling/"},{"categories":["posts"],"content":"Example:1 Function returns result and error The below function shows that the function returns result and then the value to identify any error package main import ( \"bufio\" \"fmt\" \"os\" \"strings\" \"strconv\" ) func main() { reader := bufio.NewReader(os.Stdin) fmt.Println(\"Quiz: Answer True/False\") fmt.Println(\"Go is an open source programming language? \") name, _ := reader.ReadString('\\n') name = strings.Replace(name, \"\\n\", \"\", -1) var res bool = true res, err := strconv.ParseBool(name) if err != nil { fmt.Println(\"Error: \", err) } fmt.Println(\"Input answer is = \", res) } ","date":"2019-04-06","objectID":"/golang-how-to-return-multiple-value-and-error-handling/:1:1","tags":["golang","go"],"title":"Golang How to Return Multiple Value and Error Handling","uri":"/golang-how-to-return-multiple-value-and-error-handling/"},{"categories":["posts"],"content":"Example:2 Function return multiple value The below function shows that it returns 2 ints. package main import \"fmt\" func maxmin(a int, b int) (int, int) { if a \u003e b { return a, b } else { return b, a } } func main() { var a = 30 var b = 60 var max, min = maxmin(a, b) fmt.Println(\"Max = \", max, \"\\nMin = \", min) } ","date":"2019-04-06","objectID":"/golang-how-to-return-multiple-value-and-error-handling/:1:2","tags":["golang","go"],"title":"Golang How to Return Multiple Value and Error Handling","uri":"/golang-how-to-return-multiple-value-and-error-handling/"},{"categories":null,"content":"About Me I have over 10+ years of experience in design \u0026 develop software. I have worked with small startups and large service \u0026 product development companies. While I’m a proficient Data Engineer, My expertise is building scalable backed services(Batch \u0026 Stream processing, API services) with good understanding of computing, network, storage, and security to design solutions that run on Cloud. Highlights Good hands on experience in the constantly evolving Big Data Ecosystem \u0026 Cloud computing Web application design \u0026 development experience using Java\\J2EE, Spring Frameworks, and Angular Extensive Hands-on experience in Data engineering and DevOps practice Good understanding of computing, network, storage, and security to design solutions that run on Cloud Experience with Cloud-first and migration exercises Experience in translating complex functional and technical requirements into detailed architecture and design Delivering systems and features with top-notch quality, on time Excellent knowledge of the Infrastructure as a Code (IaC) pattern using tools like Terraform Hands-on expertise in scripting and automation using languages like Bash, Python, Groovy Well versed with container frameworks like Docker and also managed container services like ECS/ACS Experience in implementing event-driven Microservices Involved in implementing Data Lake for Health-care and Telecom clients. Experience in Data Processing Architectures - Lambda and Kappa architectures Experience with message queue integration using RabbitMQ and Kafka(Apache/Confluent) building medium-to-large pipelines Hands-on experience in Git, CI tools like Jenkins and building end to end CI/CD pipelines for projects ","date":"2019-04-01","objectID":"/about/:0:1","tags":null,"title":"","uri":"/about/"}]