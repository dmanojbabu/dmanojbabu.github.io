[{"categories":["posts"],"content":"Go has built-in support to return more than one values.","date":"2019-04-06","objectID":"/go_multiple_return_value/","tags":["golang","go"],"title":"Golang: Multiple Return Values","uri":"/go_multiple_return_value/"},{"categories":["posts"],"content":"Go has built-in support to return more than one values. We have used In most programming languages, functions can return single value, but in Go, they can return any number of values. The main use case of returning more than one values is to return the return the functions result and then the value to identify any error. Example:1 The below function shows that the function returns result and then the value to identify any error package main import ( \"bufio\" \"fmt\" \"os\" \"strings\" \"strconv\" ) func main() { reader := bufio.NewReader(os.Stdin) fmt.Println(\"Quiz: Answer True/False\") fmt.Println(\"Go is an open source programming language? \") name, _ := reader.ReadString('\\n') name = strings.Replace(name, \"\\n\", \"\", -1) var res bool = true res, err := strconv.ParseBool(name) if err != nil { fmt.Println(\"Error: \", err) } fmt.Println(\"Input answer is = \", res) } Example:2 The below function shows that it returns 2 ints. package main import \"fmt\" func maxmin(a int, b int) (int, int) { if a \u003e b { return a, b } else { return b, a } } func main() { var a = 30 var b = 60 var max, min = maxmin(a, b) fmt.Println(\"Max = \", max, \"\\nMin = \", min) } ","date":"2019-04-06","objectID":"/go_multiple_return_value/:0:0","tags":["golang","go"],"title":"Golang: Multiple Return Values","uri":"/go_multiple_return_value/"},{"categories":null,"content":"About Me I have over 10+ years of experience in design \u0026 develop software. I have worked with small startups and large service \u0026 product development companies. While Iâ€™m a proficient Data Engineer, My expertise is building scalable backed services(Batch \u0026 Stream processing, API services) with good understanding of computing, network, storage, and security to design solutions that run on Cloud. Highlights Good hands on experience in the constantly evolving Big Data Ecosystem \u0026 Cloud computing Web application design \u0026 development experience using Java\\J2EE, Spring Frameworks, and Angular Extensive Hands-on experience in Data engineering and DevOps practice Good understanding of computing, network, storage, and security to design solutions that run on Cloud Experience with Cloud-first and migration exercises Experience in translating complex functional and technical requirements into detailed architecture and design Delivering systems and features with top-notch quality, on time Excellent knowledge of the Infrastructure as a Code (IaC) pattern using tools like Terraform Hands-on expertise in scripting and automation using languages like Bash, Python, Groovy Well versed with container frameworks like Docker and also managed container services like ECS/ACS Experience in implementing event-driven Microservices Involved in implementing Data Lake for Health-care and Telecom clients. Experience in Data Processing Architectures - Lambda and Kappa architectures Experience with message queue integration using RabbitMQ and Kafka(Apache/Confluent) building medium-to-large pipelines Hands-on experience in Git, CI tools like Jenkins and building end to end CI/CD pipelines for projects ","date":"2019-04-01","objectID":"/about/:0:1","tags":null,"title":"","uri":"/about/"}]